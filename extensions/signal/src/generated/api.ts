/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  '/v1/about': {
    /** Returns the supported API versions and the internal build nr */
    get: {
      responses: {
        /** OK */
        200: {
          schema: definitions['client.About'];
        };
      };
    };
  };
  '/v1/accounts': {
    /** Lists all of the accounts linked or registered */
    get: {
      responses: {
        /** OK */
        200: {
          schema: string[];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/accounts/{number}/rate-limit-challenge': {
    /** When running into rate limits, sometimes the limit can be lifted, by solving a CAPTCHA. To get the captcha token, go to https://signalcaptchas.org/challenge/generate.html For the staging environment, use: https://signalcaptchas.org/staging/registration/generate.html. The "challenge_token" is the token from the failed send attempt. The "captcha" is the captcha result, starting with signalcaptcha:// */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Request */
          data: definitions['api.RateLimitChallengeRequest'];
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/accounts/{number}/settings': {
    /** Update the account attributes on the signal server. */
    put: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Request */
          data: definitions['api.UpdateAccountSettingsRequest'];
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/accounts/{number}/username': {
    /** Allows to set the username that should be used for this account. This can either be just the nickname (e.g. test) or the complete username with discriminator (e.g. test.123). Returns the new username with discriminator and the username link. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Request */
          data: definitions['api.SetUsernameRequest'];
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions['client.SetUsernameResponse'];
        };
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Delete the username associated with this account. */
    delete: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/attachments': {
    /** List all downloaded attachments */
    get: {
      responses: {
        /** OK */
        200: {
          schema: string[];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/attachments/{attachment}': {
    /** Serve the attachment with the given id */
    get: {
      parameters: {
        path: {
          /** Attachment ID */
          attachment: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Remove the attachment with the given id from filesystem. */
    delete: {
      parameters: {
        path: {
          /** Attachment ID */
          attachment: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/configuration': {
    /** List the REST API configuration. */
    get: {
      responses: {
        /** OK */
        200: {
          schema: definitions['api.Configuration'];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Set the REST API configuration. */
    post: {
      parameters: {
        body: {
          /** Configuration */
          data: definitions['api.Configuration'];
        };
      };
      responses: {
        /** OK */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/configuration/{number}/settings': {
    /** List account specific settings. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Request */
          data: definitions['api.TrustModeResponse'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Set account specific settings. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Request */
          data: definitions['api.TrustModeRequest'];
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/contacts/{number}': {
    /** List all contacts for the given number. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['client.ListContactsResponse'][];
        };
      };
    };
    /** Updates the info associated to a number on the contact list. */
    put: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Contact */
          data: definitions['api.UpdateContactRequest'];
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/contacts/{number}/sync': {
    /** Send a synchronization message with the local contacts list to all linked devices. This command should only be used if this is the primary device. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/devices/{number}': {
    /** Links another device to this device. Only works, if this is the master device. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Request */
          data: definitions['api.AddDeviceRequest'];
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/groups/{number}': {
    /** List all Signal Groups. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['client.GroupEntry'][];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Create a new Signal Group with the specified members. */
    post: {
      parameters: {
        body: {
          /** Input Data */
          data: definitions['api.CreateGroupRequest'];
        };
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions['api.CreateGroupResponse'];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/groups/{number}/{groupid}': {
    /** List a specific Signal Group. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['client.GroupEntry'];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Update the state of a Signal Group. */
    put: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
        body: {
          /** Input Data */
          data: definitions['api.UpdateGroupRequest'];
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Delete the specified Signal Group. */
    delete: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group Id */
          groupid: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/groups/{number}/{groupid}/admins': {
    /** Add one or more admins to an existing Signal Group. */
    post: {
      parameters: {
        body: {
          /** Admins */
          data: definitions['api.ChangeGroupAdminsRequest'];
        };
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Remove one or more admins from an existing Signal Group. */
    delete: {
      parameters: {
        body: {
          /** Admins */
          data: definitions['api.ChangeGroupAdminsRequest'];
        };
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/groups/{number}/{groupid}/block': {
    /** Block the specified Signal Group. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/groups/{number}/{groupid}/join': {
    /** Join the specified Signal Group. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/groups/{number}/{groupid}/members': {
    /** Add one or more members to an existing Signal Group. */
    post: {
      parameters: {
        body: {
          /** Members */
          data: definitions['api.ChangeGroupMembersRequest'];
        };
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Remove one or more members from an existing Signal Group. */
    delete: {
      parameters: {
        body: {
          /** Members */
          data: definitions['api.ChangeGroupMembersRequest'];
        };
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/groups/{number}/{groupid}/quit': {
    /** Quit the specified Signal Group. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
          /** Group ID */
          groupid: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/health': {
    /** Internally used by the docker container to perform the health check. */
    get: {
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
      };
    };
  };
  '/v1/identities/{number}': {
    /** List all identities for the given number. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['client.IdentityEntry'][];
        };
      };
    };
  };
  '/v1/identities/{number}/trust/{numberToTrust}': {
    /** Trust an identity. When 'trust_all_known_keys' is set to' true', all known keys of this user are trusted. **This is only recommended for testing.** */
    put: {
      parameters: {
        body: {
          /** Input Data */
          data: definitions['api.TrustIdentityRequest'];
        };
        path: {
          /** Registered Phone Number */
          number: string;
          /** Number To Trust */
          numberToTrust: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
      };
    };
  };
  '/v1/profiles/{number}': {
    /** Set your name and optional an avatar. */
    put: {
      parameters: {
        body: {
          /** Profile Data */
          data: definitions['api.UpdateProfileRequest'];
        };
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/qrcodelink': {
    /** Link device and generate QR code */
    get: {
      parameters: {
        query: {
          /** Device Name */
          device_name: string;
          /** QRCode Version (defaults to 10) */
          qrcode_version?: number;
        };
      };
      responses: {
        /** Image */
        200: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/reactions/{number}': {
    /** React to a message */
    post: {
      parameters: {
        body: {
          /** Reaction */
          data: definitions['api.Reaction'];
        };
        path: {
          /** Registered phone number */
          number: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Remove a reaction */
    delete: {
      parameters: {
        body: {
          /** Reaction */
          data: definitions['api.Reaction'];
        };
        path: {
          /** Registered phone number */
          number: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/receipts/{number}': {
    /** Send a read or viewed receipt */
    post: {
      parameters: {
        body: {
          /** Receipt */
          data: definitions['api.Receipt'];
        };
        path: {
          /** Registered phone number */
          number: string;
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/receive/{number}': {
    /** Receives Signal Messages from the Signal Network. If you are running the docker container in normal/native mode, this is a GET endpoint. In json-rpc mode this is a websocket endpoint. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        query: {
          /** Receive timeout in seconds (default: 1) */
          timeout?: string;
          /** Specify whether the attachments of the received message should be ignored */
          ignore_attachments?: string;
          /** Specify whether stories should be ignored when receiving messages */
          ignore_stories?: string;
          /** Specify the maximum number of messages to receive (default: unlimited) */
          max_messages?: string;
          /** Specify whether read receipts should be sent when receiving messages */
          send_read_receipts?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: string[];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/register/{number}': {
    /** Register a phone number with the signal network. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Additional Settings */
          data?: definitions['api.RegisterNumberRequest'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/register/{number}/verify/{token}': {
    /** Verify a registered phone number with the signal network. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
          /** Verification Code */
          token: string;
        };
        body: {
          /** Additional Settings */
          data?: definitions['api.VerifyNumberSettings'];
        };
      };
      responses: {
        /** OK */
        201: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/search/{number}': {
    /** Check if one or more phone numbers are registered with the Signal Service. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number?: string;
        };
        query: {
          /** Numbers to check */
          numbers: string[];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['api.SearchResponse'][];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/send': {
    /** Send a signal message */
    post: {
      parameters: {
        body: {
          /** Input Data */
          data: definitions['api.SendMessageV1'];
        };
      };
      responses: {
        /** OK */
        201: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/sticker-packs/{number}': {
    /** List Installed Sticker Packs. */
    get: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['client.ListInstalledStickerPacksResponse'][];
        };
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** In order to add a sticker pack, browse to https://signalstickers.org/ and select the sticker pack you want to add. Then, press the "Add to Signal" button. If you look at the address bar in your browser you should see an URL in this format: https://signal.art/addstickers/#pack_id=XXX&pack_key=YYY, where XXX is the pack_id and YYY is the pack_key. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Request */
          data: definitions['api.AddStickerPackRequest'];
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/typing-indicator/{number}': {
    /** Show Typing Indicator. */
    put: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Type */
          data: definitions['api.TypingIndicatorRequest'];
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
    /** Hide Typing Indicator. */
    delete: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Type */
          data: definitions['api.TypingIndicatorRequest'];
        };
      };
      responses: {
        /** No Content */
        204: {
          schema: string;
        };
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v1/unregister/{number}': {
    /** Disables push support for this device. **WARNING:** If *delete_account* is set to *true*, the account will be deleted from the Signal Server. This cannot be undone without loss. */
    post: {
      parameters: {
        path: {
          /** Registered Phone Number */
          number: string;
        };
        body: {
          /** Additional Settings */
          data?: definitions['api.UnregisterNumberRequest'];
        };
      };
      responses: {
        /** No Content */
        204: never;
        /** Bad Request */
        400: {
          schema: definitions['api.Error'];
        };
      };
    };
  };
  '/v2/send': {
    /** Send a signal message. Set the text_mode to 'styled' in case you want to add formatting to your text message. Styling Options: *italic text*, **bold text**, ~strikethrough text~. If you want to escape a formatting character, prefix it with two backslashes ('\\') */
    post: {
      parameters: {
        body: {
          /** Input Data */
          data: definitions['api.SendMessageV2'];
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions['api.SendMessageResponse'];
        };
        /** Bad Request */
        400: {
          schema: definitions['api.SendMessageError'];
        };
      };
    };
  };
};

export type definitions = {
  'api.AddDeviceRequest': {
    uri?: string;
  };
  'api.AddStickerPackRequest': {
    /** @example 9a32eda01a7a28574f2eb48668ae0dc4 */
    pack_id?: string;
    /** @example 19546e18eba0ff69dea78eb591465289d39e16f35e58389ae779d4f9455aff3a */
    pack_key?: string;
  };
  'api.ChangeGroupAdminsRequest': {
    admins?: string[];
  };
  'api.ChangeGroupMembersRequest': {
    members?: string[];
  };
  'api.Configuration': {
    logging?: definitions['api.LoggingConfiguration'];
  };
  'api.CreateGroupRequest': {
    description?: string;
    expiration_time?: number;
    /** @enum {string} */
    group_link?: 'disabled' | 'enabled' | 'enabled-with-approval';
    members?: string[];
    name?: string;
    permissions?: definitions['api.GroupPermissions'];
  };
  'api.CreateGroupResponse': {
    id?: string;
  };
  'api.Error': {
    error?: string;
  };
  'api.GroupPermissions': {
    /** @enum {string} */
    add_members?: 'only-admins' | 'every-member';
    /** @enum {string} */
    edit_group?: 'only-admins' | 'every-member';
  };
  'api.LoggingConfiguration': {
    Level?: string;
  };
  'api.RateLimitChallengeRequest': {
    /** @example signalcaptcha://{captcha value} */
    captcha?: string;
    /** @example <challenge token> */
    challenge_token?: string;
  };
  'api.Reaction': {
    reaction?: string;
    recipient?: string;
    target_author?: string;
    timestamp?: number;
  };
  'api.Receipt': {
    /** @enum {string} */
    receipt_type?: 'read' | 'viewed';
    recipient?: string;
    timestamp?: number;
  };
  'api.RegisterNumberRequest': {
    captcha?: string;
    use_voice?: boolean;
  };
  'api.SearchResponse': {
    number?: string;
    registered?: boolean;
  };
  'api.SendMessageError': {
    account?: string;
    challenge_tokens?: string[];
    error?: string;
  };
  'api.SendMessageResponse': {
    timestamp?: string;
  };
  'api.SendMessageV1': {
    /** @example '<BASE64 ENCODED DATA>' OR 'data:<MIME-TYPE>;base64,<BASE64 ENCODED DATA>' OR 'data:<MIME-TYPE>;filename=<FILENAME>;base64,<BASE64 ENCODED DATA>' */
    base64_attachment?: string;
    is_group?: boolean;
    message?: string;
    number?: string;
    recipients?: string[];
  };
  'api.SendMessageV2': {
    /**
     * @example [
     *   "<BASE64 ENCODED DATA>",
     *   "data:<MIME-TYPE>;base64<comma><BASE64 ENCODED DATA>",
     *   "data:<MIME-TYPE>;filename=<FILENAME>;base64<comma><BASE64 ENCODED DATA>"
     * ]
     */
    base64_attachments?: string[];
    edit_timestamp?: number;
    mentions?: definitions['data.MessageMention'][];
    message?: string;
    notify_self?: boolean;
    number?: string;
    quote_author?: string;
    quote_mentions?: definitions['data.MessageMention'][];
    quote_message?: string;
    quote_timestamp?: number;
    recipients?: string[];
    sticker?: string;
    /** @enum {string} */
    text_mode?: 'normal' | 'styled';
  };
  'api.SetUsernameRequest': {
    /** @example test */
    username?: string;
  };
  'api.TrustIdentityRequest': {
    /** @example false */
    trust_all_known_keys?: boolean;
    verified_safety_number?: string;
  };
  'api.TrustModeRequest': {
    trust_mode?: string;
  };
  'api.TrustModeResponse': {
    trust_mode?: string;
  };
  'api.TypingIndicatorRequest': {
    recipient?: string;
  };
  'api.UnregisterNumberRequest': {
    /** @example false */
    delete_account?: boolean;
    /** @example false */
    delete_local_data?: boolean;
  };
  'api.UpdateAccountSettingsRequest': {
    discoverable_by_number?: boolean;
    share_number?: boolean;
  };
  'api.UpdateContactRequest': {
    expiration_in_seconds?: number;
    name?: string;
    recipient?: string;
  };
  'api.UpdateGroupRequest': {
    base64_avatar?: string;
    description?: string;
    expiration_time?: number;
    name?: string;
  };
  'api.UpdateProfileRequest': {
    about?: string;
    base64_avatar?: string;
    name?: string;
  };
  'api.VerifyNumberSettings': {
    pin?: string;
  };
  'client.About': {
    build?: number;
    capabilities?: Record<string, string[]>;
    mode?: string;
    version?: string;
    versions?: string[];
  };
  'client.GroupEntry': {
    admins?: string[];
    blocked?: boolean;
    id?: string;
    internal_id?: string;
    invite_link?: string;
    members?: string[];
    name?: string;
    pending_invites?: string[];
    pending_requests?: string[];
  };
  'client.IdentityEntry': {
    added?: string;
    fingerprint?: string;
    number?: string;
    safety_number?: string;
    status?: string;
  };
  'client.ListContactsResponse': {
    blocked?: boolean;
    color?: string;
    message_expiration?: string;
    name?: string;
    number?: string;
    profile_name?: string;
    username?: string;
    uuid?: string;
  };
  'client.ListInstalledStickerPacksResponse': {
    author?: string;
    installed?: boolean;
    pack_id?: string;
    title?: string;
    url?: string;
  };
  'client.SetUsernameResponse': {
    username?: string;
    username_link?: string;
  };
  'data.MessageMention': {
    author?: string;
    length?: number;
    start?: number;
  };
};

export type operations = {};

export type external = {};

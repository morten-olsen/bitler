/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface BitlerServer {
  capabilities: {
    "action-requests.list": {
      input: {};
      output: {
        actionRequests: {
          kind: string;
          name: string;
          description: string;
        }[];
      };
    };
    "action-requests.describe": {
      input: {
        kind: string;
      };
      output: {
        actionRequest: {
          kind: string;
          name: string;
          description: string;
          schema?: unknown;
        };
      };
    };
    "context-items.list": {
      input: {};
      output: {
        contextItems: {
          kind: string;
          name: string;
          description: string;
        }[];
      };
    };
    "context-items.describe": {
      input: {
        kind: string;
      };
      output: {
        contextItem: {
          kind: string;
          name: string;
          description: string;
          schema?: unknown;
        };
      };
    };
    "events.list": {
      input: {};
      output: {
        events: {
          kind: string;
          name: string;
          group: string;
          description: string;
        }[];
      };
    };
    "capabilities.describe": {
      input: {
        kind: string;
      };
      output: {
        capability: {
          kind: string;
          name: string;
          group: string;
          description: string;
          input?: unknown;
          output?: unknown;
        };
      };
    };
    "capabilities.list": {
      input: {};
      output: {
        capabilities: {
          kind: string;
          name: string;
          group: string;
          description: string;
        }[];
      };
    };
    "capabilities.find": {
      input: {
        query: string;
        limit?: number;
      };
      output: {
        capabilities: {
          capability: {
            kind: string;
            name: string;
            group: string;
            description: string;
          };
          similarity: number;
        }[];
      };
    };
    "configs.list": {
      input: {};
      output: {
        configs: {
          kind: string;
          name: string;
          group?: string;
          description: string;
          hasConfig: boolean;
        }[];
      };
    };
    "configs.describe": {
      input: {
        kind: string;
      };
      output: {
        config: {
          kind: string;
          name: string;
          group?: string;
          description: string;
          schema?: unknown;
          hasValue: boolean;
        };
      };
    };
    "configs.set": {
      input: {
        kind: string;
        value?: unknown;
      };
      output: {};
    };
    "configs.get": {
      input: {
        kind: string;
      };
      output: {
        value?: unknown;
      };
    };
    "configs.remove": {
      input: {
        kind: string;
      };
      output: {
        success: boolean;
      };
    };
    "notification.add": {
      input: {
        id?: string;
        title: string;
        message: string;
        actions?: {
          title: string;
          description?: string;
          /**
           * The kind of capability to run
           */
          kind: string;
          removeNotification?: boolean;
          /**
           * The input to the capability
           */
          data?: {
            [k: string]: unknown;
          };
        }[];
      };
      output: {
        id: string;
      };
    };
    "notification.list": {
      input: {};
      output: {
        notifications: {
          id: string;
          title: string;
          message: string;
          createdAt: string;
          actions: {
            id: string;
            title: string;
            description?: string;
            kind: string;
            removeNotification?: boolean;
            data?: unknown;
          }[];
        }[];
      };
    };
    "notification.remove": {
      input: {
        ids: string[];
      };
      output: {
        success: boolean;
      };
    };
    "notification.run-action": {
      input: {
        actionId: string;
      };
      output: {
        actionId: string;
        notificationId: string;
        success: boolean;
      };
    };
    "models.list": {
      input: {};
      output: {
        models: {
          kind: string;
          name: string;
          provider: string;
        }[];
      };
    };
    "agents.list": {
      input: {};
      output: {
        agents: {
          kind: string;
          name: string;
          group?: string;
          description?: string;
        }[];
      };
    };
    "dialog.prompt": {
      input: {
        agent?: string;
        model?: string;
        systemPrompt?: string;
        discoverCapabilities?: number;
        discoverAgents?: number;
        capabilities?: string[];
        agents?: string[];
        context?: {
          [k: string]: unknown;
        };
        maxTokens?: number;
        prompt: string;
        dialog?: {
          role: "user" | "assistant" | "system";
          content: string;
        }[];
      };
      output: {
        response?: unknown;
        actionRequests?: {
          kind: string;
          description?: string;
          value?: unknown;
        }[];
        context?: {
          [k: string]: unknown;
        };
        usedCapabilities: string[];
        files?: {
          hash: string;
          caption?: string;
          contentType?: string;
        }[];
      };
    };
    "dialog.create-new": {
      input: {
        /**
         * The title of the dialog
         */
        title: string;
        /**
         * The system prompt for the dialog
         */
        systemPrompt?: string;
        /**
         * The user prompt for the dialog
         */
        userPrompt?: string;
        /**
         * The capabilities that the agent will have access to
         */
        capabilities?: string[];
        /**
         * An intro shown to the user before the dialog starts
         */
        userIntro: string;
      };
      output: {
        success: boolean;
      };
    };
    "agents.set": {
      input: {
        kind: string;
        name: string;
        group?: string;
        description?: string;
        model?: string;
        systemPrompt?: string;
        discoverCapabilities?: number;
        discoverAgents?: number;
        capabilities?: string[];
        agents?: string[];
      };
      output: {
        success: boolean;
      };
    };
    "agents.describe": {
      input: {
        kind: string;
      };
      output: {
        kind: string;
        name: string;
        group?: string;
        description?: string;
        model?: string;
        systemPrompt?: string;
        discoverCapabilities?: number;
        discoverAgents?: number;
        capabilities?: string[];
        agents?: string[];
      };
    };
    "conversations.prompt": {
      input: {
        conversationId: string;
        agent?: string;
        model?: string;
        systemPrompt?: string;
        discoverCapabilities?: number;
        discoverAgents?: number;
        capabilities?: string[];
        agents?: string[];
        context?: {
          [k: string]: unknown;
        };
        maxTokens?: number;
        prompt: string;
        dialog?: {
          role: "user" | "assistant" | "system";
          content: string;
        }[];
      };
      output: {
        response?: unknown;
        actionRequests?: {
          kind: string;
          description?: string;
          value?: unknown;
        }[];
        context?: {
          [k: string]: unknown;
        };
        usedCapabilities: string[];
        files?: {
          hash: string;
          caption?: string;
          contentType?: string;
        }[];
      };
    };
    "conversations.sync": {
      input: {
        conversationId: string;
      };
      output: {
        conversationId: string;
        title?: string;
        description?: string;
        agent?: string;
        model?: string;
        messages: {
          role: "user" | "assistant" | "system";
          content: string;
          id: string;
          files?: {
            hash: string;
            caption?: string;
            contentType?: string;
          }[];
          loading?: boolean;
        }[];
        context?: {
          [k: string]: unknown;
        };
        agents?: string[];
        capabilities?: string[];
        discoverCapabilities?: number;
        discoverAgents?: number;
      };
    };
    "conversations.remove-messages": {
      input: {
        conversationId: string;
        messageIds: string[];
      };
      output: {
        success: boolean;
      };
    };
    "conversations.retry-message": {
      input: {
        conversationId: string;
        messageId: string;
      };
      output: {
        response?: unknown;
        actionRequests?: {
          kind: string;
          description?: string;
          value?: unknown;
        }[];
        context?: {
          [k: string]: unknown;
        };
        usedCapabilities: string[];
        files?: {
          hash: string;
          caption?: string;
          contentType?: string;
        }[];
      };
    };
    "conversations.list": {
      input: {};
      output: {
        conversations: {
          id: string;
          title?: string;
          description?: string;
        }[];
      };
    };
    "conversations.set-settings": {
      input: {
        conversationId: string;
        title?:
          | (
              | {
                  [k: string]: unknown;
                }
              | string
            )
          | null;
        description?:
          | (
              | {
                  [k: string]: unknown;
                }
              | string
            )
          | null;
        model?:
          | (
              | {
                  [k: string]: unknown;
                }
              | string
            )
          | null;
        agent?:
          | (
              | {
                  [k: string]: unknown;
                }
              | string
            )
          | null;
        agents?:
          | (
              | {
                  [k: string]: unknown;
                }
              | string[]
            )
          | null;
        context?: {
          [k: string]: unknown;
        } | null;
        capabilities?:
          | (
              | {
                  [k: string]: unknown;
                }
              | string[]
            )
          | null;
        discoverCapabilities?:
          | (
              | {
                  [k: string]: unknown;
                }
              | number
            )
          | null;
        discoverAgents?:
          | (
              | {
                  [k: string]: unknown;
                }
              | number
            )
          | null;
      };
      output: {
        success: boolean;
      };
    };
  };
  actionRequests: {};
  contextItems: {
    "builtin.capabilities": {
      schema: {
        kind: string;
        name: string;
        group: string;
        description: string;
      }[];
    };
  };
  events: {
    "configs.updated": {
      input: {};
      output: {
        config: {
          kind: string;
        };
      };
    };
    "capabilities.updated": {
      input: {};
      output: {
        capability: {
          kinds: string[];
        };
      };
    };
    "context-items.updated": {
      input: {};
      output: {
        kind: string;
      };
    };
    "config.value-changed": {
      input: {
        kinds?: string[];
      };
      output: {
        kind: string;
        value: {
          from?: unknown;
          to?: unknown;
        };
      };
    };
    "notification.removed": {
      input: {
        ids?: string[];
      };
      output: {
        id: string;
      };
    };
    "notification.created": {
      input: {};
      output: {
        id: string;
        title: string;
        message: string;
        actions: {
          id: string;
          title: string;
          description?: string;
        }[];
      };
    };
    "models.updated": {
      input: {};
      output: {};
    };
    "conversations.updated": {
      input: {
        ids?: string[];
      };
      output:
        | {
            type: "sync";
            payload: {
              conversationId: string;
              title?: string;
              description?: string;
              agent?: string;
              model?: string;
              messages: {
                role: "user" | "assistant" | "system";
                content: string;
                id: string;
                files?: {
                  hash: string;
                  caption?: string;
                  contentType?: string;
                }[];
                loading?: boolean;
              }[];
              context?: {
                [k: string]: unknown;
              };
              agents?: string[];
              capabilities?: string[];
              discoverCapabilities?: number;
              discoverAgents?: number;
            };
          }
        | {
            type: "delta";
            payload: {
              conversationId: string;
              delta?: unknown;
              hash: {
                from: string;
                to: string;
              };
            };
          };
    };
  };
}

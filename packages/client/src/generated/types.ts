/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface BitlerServer {
  capabilities: {
    "builtin.list-agents": {
      input: {};
      output: {
        agents: {
          kind: string;
          name: string;
          group?: string;
          description?: string;
        }[];
      };
    };
    "builtin.list-capabilities": {
      input: {};
      output: {
        included: {
          kind: string;
          name: string;
          group: string;
          description: string;
        }[];
        all: {
          kind: string;
          name: string;
          group: string;
          description: string;
        }[];
      };
    };
    "builtin.create-new-dialog": {
      input: {
        /**
         * The title of the dialog
         */
        title: string;
        /**
         * The system prompt for the dialog
         */
        systemPrompt?: string;
        /**
         * The user prompt for the dialog
         */
        userPrompt?: string;
        /**
         * The capabilities that the agent will have access to
         */
        capabilities?: string[];
        /**
         * An intro shown to the user before the dialog starts
         */
        userIntro: string;
      };
      output: {
        success: boolean;
      };
    };
    "builtin.add-capabilities": {
      input: {
        /**
         * The capabilities to add to the conversation (kind). These will become available the next time the user makes a request.
         */
        capabilities: string[];
      };
      output: {
        success: boolean;
      };
    };
    "builtin.prompt": {
      input: {
        agent?: string;
        model?: string;
        systemPrompt?: string;
        discoverCapabilities?: number;
        discoverAgents?: number;
        capabilities?: string[];
        agents?: string[];
        context?: {
          [k: string]: unknown;
        };
        maxTokens?: number;
        conversationId?: string;
        prompt: string;
        dialog?: {
          role: "user" | "assistant" | "system";
          content: string;
        }[];
      };
      output: {
        response: string;
        context: {
          [k: string]: unknown;
        };
        actionRequests: {
          kind: string;
          description?: string;
          value?: unknown;
        }[];
      };
    };
    "history.list": {
      input: {
        limit?: number;
      };
      output: {
        conversations: {
          id: string;
          name?: string;
          description?: string;
          pinned: boolean;
          createdAt: string;
          updatedAt: string;
        }[];
      };
    };
    "history.get": {
      input: {
        id: string;
      };
      output: {
        id: string;
        name?: string;
        description?: string;
        pinned: boolean;
        agent?: string;
        systemPrompt?: string;
        discoverCapabilies?: number;
        discoverAgents?: number;
        capabilities: string[];
        agents: string[];
        createdAt: string;
        updatedAt: string;
        messages: {
          id: string;
          role: string;
          content: string;
          createdAt: string;
        }[];
      };
    };
    "history.add-messages": {
      input: {
        conversationId: string;
        role: string;
        content: string;
      }[];
      output: {
        success: boolean;
      };
    };
    "history.set": {
      input: {
        id: string;
        name?: string | null;
        description?: string | null;
        agent?: string | null;
        systemPrompt?: string | null;
        discoverCapabilies?: number;
        discoverAgents?: number;
        capabilities?: string[];
        agents?: string[];
      };
      output: {
        success: boolean;
      };
    };
    "custom-agents.list": {
      input: {};
      output: {
        agents: {
          kind: string;
          name: string;
          group?: string;
          description?: string;
          model?: string;
          systemPrompt?: string;
          discoverTasks?: number;
          discoverAgents?: number;
          capabilities?: string[];
          agents?: string[];
        }[];
      };
    };
    "custom-agents.set": {
      input: {
        kind: string;
        name: string;
        group?: string;
        description?: string;
        model?: string;
        systemPrompt?: string;
        discoverTasks?: number;
        discoverAgents?: number;
        capabilities?: string[];
        agents?: string[];
      };
      output: {
        success: boolean;
      };
    };
    "custom-agents.remove": {
      input: {
        kinds: string[];
      };
      output: {
        success: boolean;
      };
    };
    "timers.add": {
      input: {
        /**
         * Duration in seconds
         */
        duration: number;
        /**
         * Description of the timer
         */
        description?: string;
      };
      output: {
        /**
         * ID of the timer
         */
        id: string;
      };
    };
    "timers.remove": {
      input: {
        /**
         * ID of the timer
         */
        id: string;
      };
      output: {
        /**
         * True if the timer was removed
         */
        success: boolean;
      };
    };
    "timers.list": {
      input: {};
      output: {
        timers: {
          /**
           * ID of the timer
           */
          id: string;
          /**
           * Description of the timer
           */
          description?: string;
          /**
           * Duration in seconds
           */
          duration: number;
          /**
           * Start time of the timer
           */
          start: string;
        }[];
      };
    };
    "game.set-state": {
      input: {
        /**
         * The JSON representation of the game state as a string.
         */
        json: string;
      };
      output: {
        [k: string]: unknown;
      };
    };
    "game.roll-dice": {
      input: {
        /**
         * The number of sides on the dice.
         */
        sides: number;
      };
      /**
       * The number rolled on the dice.
       */
      output: number;
    };
    "json-documents.add-document": {
      input: {
        source: string;
        type: string;
        data?: unknown;
      };
      output: {
        id: string;
      };
    };
    "json-documents.find-documents": {
      input: {
        sources?: string[];
        types?: string[];
        limit?: number;
      };
      output: {
        id: string;
        source: string;
        type: string;
        createdAt: string;
        data?: unknown;
      }[];
    };
    "json-documents.get-sources": {
      input: {};
      output: string[];
    };
    "json-documents.get-types": {
      input: {};
      output: string[];
    };
    "json-documents.remove-documents": {
      input: {
        ids: string[];
        source?: string;
        from?: string;
        to?: string;
      };
      output: {
        success: boolean;
      };
    };
    "homeassistant.lights.get": {
      input: {
        /**
         * The room ids to turn off the lights in (allows multiple rooms)
         */
        rooms: string[];
        /**
         * The duration in seconds to transition to the new state
         */
        transition?: number;
      };
      output: {
        rooms: {
          id: string;
          all: {
            /**
             * The brightness of the light between 0 and 255
             */
            brightness?: number | null;
            color_temp_kelvin?: number | null;
            rgb_color?: number[] | null;
            friendly_name: string;
            lights?: string[] | null;
            entity_id?: string[] | null;
            icon?: string | null;
          };
        }[];
      };
    };
    "homeassistant.lights.turn-on": {
      input: {
        /**
         * The room ids to turn on the lights in (allows multiple rooms)
         */
        rooms: string[];
        /**
         * Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.
         */
        brightness?: number;
        /**
         * Change brightness by a percentage.
         */
        brightnessStep?: number;
        /**
         * light temperature in kelvin
         */
        temperature?: number;
        /**
         * The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue
         */
        color?: {
          r: number;
          g: number;
          b: number;
        };
        /**
         * The duration in seconds to transition to the new state
         */
        transition?: number;
      };
      output: {
        success: boolean;
      };
    };
    "homeassistant.lights.turn-off": {
      input: {
        /**
         * The room ids to turn off the lights in (allows multiple rooms)
         */
        rooms: string[];
        /**
         * The duration in seconds to transition to the new state
         */
        transition?: number;
      };
      output: {
        success: boolean;
      };
    };
    "homeassistant.setup.set-config": {
      input: {
        rooms: {
          id: string;
          names: string[];
          mediaPlayers?: string | null;
          lightGroup?: string | null;
          lights?: {
            id: string;
            name: string;
          }[];
        }[];
      };
      output: {
        success: boolean;
      };
    };
    "homeassistant.setup.get-config": {
      input: {};
      output: {
        rooms: {
          id: string;
          names: string[];
          mediaPlayers?: string | null;
          lightGroup?: string | null;
          lights?: {
            id: string;
            name: string;
          }[];
        }[];
      };
    };
    "spotify.search": {
      input: {
        query: string;
        types: {
          album: boolean;
          artist: boolean;
          playlist: boolean;
          track: boolean;
        };
      };
      output: unknown;
    };
    "music.play": {
      input: {
        spotifyUris: string[];
        /**
         * Room ID
         */
        room: string;
      };
      output: {
        success: boolean;
      };
    };
    "music.pause": {
      input: {
        /**
         * Room ID
         */
        room: string;
      };
      output: {
        success: boolean;
      };
    };
    "music.set-volume": {
      input: {
        /**
         * Volume level (0-1)
         */
        volume: number;
        /**
         * Room ID
         */
        room: string;
      };
      output: {
        success: boolean;
      };
    };
    "music.status": {
      input: {};
      output: {
        rooms: {
          id: string;
          player: {
            id: string;
            state: string;
            volume_level?: number;
            media_content_id?: string;
            media_content_type?: string;
            media_duration?: number;
            media_title?: string;
            media_artist?: string;
            media_album_name?: string;
            app_id?: string;
            shuffle?: boolean;
            repeat?: string;
            entity_picture?: string;
          };
        }[];
      };
    };
    "music.previous": {
      input: {
        /**
         * Room ID
         */
        room: string;
      };
      output: {
        success: boolean;
      };
    };
    "music.next": {
      input: {
        /**
         * Room ID
         */
        room: string;
      };
      output: {
        success: boolean;
      };
    };
    "music.resume": {
      input: {
        /**
         * Room ID
         */
        room: string;
      };
      output: {
        success: boolean;
      };
    };
    "linear.profile": {
      input: {};
      output: {
        id: string;
        name: string;
        email: string;
      };
    };
    "linear.my-issues": {
      input: {};
      output: {
        id: string;
        title: string;
      }[];
    };
    "linear.get-issue": {
      input: {
        /**
         * The ID of the issue to get, in the format AAA-123
         */
        identifier: string;
      };
      output: {
        issue: {
          id: string;
          identifier: string;
          priority?: number;
          priorityLabel?: string;
          title: string;
          addedToCycleAt?: string;
          branchName?: string;
          createdAt: string;
          completedAt?: string;
          cancelledAt?: string;
          estimate?: number;
          labelIds: string[];
          snoozedUntil?: string;
          startedAt?: string;
          updatedAt: string;
          description?: string;
        };
      };
    };
    "signal.get-contacts": {
      input: {};
      output: {
        contacts: {
          name: string;
          phone: string;
        }[];
      };
    };
    "signal.get-groups": {
      input: {};
      output: {
        groups: {
          name: string;
          id: string;
          internalId: string;
        }[];
      };
    };
    "signal.send": {
      input: {
        /**
         * The recipient's phone number
         */
        recipient: string;
        message: string;
        /**
         * Base64 encoded attachments ("<BASE64 ENCODED DATA>", "data:<MIME-TYPE>;base64<comma><BASE64 ENCODED DATA>", "data:<MIME-TYPE>;filename=<FILENAME>;base64<comma><BASE64 ENCODED DATA>")
         */
        attachments?: string[];
      };
      output: {
        success: boolean;
      };
    };
  };
  actionRequests: {
    "builtin.add-capabilities": {
      /**
       * The capabilities to add to the agent (kind)
       */
      schema: string[];
    };
    "builtin.create-dialog": {
      schema: {
        /**
         * The title of the dialog
         */
        title: string;
        /**
         * The system prompt for the dialog
         */
        systemPrompt?: string;
        /**
         * The user prompt for the dialog
         */
        userPrompt?: string;
        /**
         * The capabilities that the agent will have access to
         */
        capabilities?: string[];
        /**
         * An intro shown to the user before the dialog starts
         */
        userIntro: string;
      };
    };
  };
  contextItems: {
    "builtin.capabilities": {
      schema: {
        kind: string;
        name: string;
        group: string;
        description: string;
      }[];
    };
    "timers.current-time": {
      schema: string;
    };
    "game.state": {
      schema: {
        [k: string]: unknown;
      };
    };
    "homeassistant.rooms": {
      schema: {
        id: string;
        names: string[];
        mediaPlayers?: string | null;
        lightGroup?: string | null;
        lights?: {
          id: string;
          name: string;
        }[];
      }[];
    };
    "linear.user": {
      schema: {
        id: string;
        name: string;
      };
    };
    "linear.issues": {
      schema: {
        id: string;
        identifier: string;
        priority?: number;
        priorityLabel?: string;
        title: string;
        addedToCycleAt?: string;
        branchName?: string;
        createdAt: string;
        completedAt?: string;
        cancelledAt?: string;
        estimate?: number;
        labelIds: string[];
        snoozedUntil?: string;
        startedAt?: string;
        updatedAt: string;
        description?: string;
      }[];
    };
  };
  agents:
    | "builtin.receptionist"
    | "agent-editor"
    | "timers"
    | "game.default"
    | "json-documents"
    | "homeassistant"
    | "homeassistant.config"
    | "music.agent"
    | "linear"
    | "signal"
    | string;
  events: {
    "history.updated": {
      input: {};
      output: {
        id: string;
      };
    };
    "timer.created": {
      input: {};
      output: {
        id: string;
        description?: string;
        duration: number;
      };
    };
    "timer.triggered": {
      input: {};
      output: {
        id: string;
        description?: string;
        duration: number;
      };
    };
    "timer.updated": {
      input: {};
      output: {
        id: string;
        description?: string;
        duration: number;
        action: "created" | "updated" | "removed";
      };
    };
  };
}
